/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void delay_us(uint32_t us);
float medirDistancia(GPIO_TypeDef* trig_port, uint16_t trig_pin, GPIO_TypeDef* echo_port, uint16_t echo_pin);
uint32_t readEcho(GPIO_TypeDef* port, uint16_t pin);
void moverAdelante(uint16_t velocidad);
void moverAtras(uint16_t velocidad);
void moverIzquierda(uint16_t velocidad);
void moverDerecha(uint16_t velocidad);
void detenerMotores(void);
void leerSensores(void);
void enviarUART(UART_HandleTypeDef *huart, const char *msg);
void modoAutonomo(void);
void modoBluetooth(void);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// =================== SENSORES DE LÍNEA ===================

#define Sensor1_PORT GPIOC
#define Sensor1_PIN  GPIO_PIN_5

#define Sensor2_PORT GPIOC
#define Sensor2_PIN  GPIO_PIN_6

#define Sensor3_PORT GPIOC
#define Sensor3_PIN  GPIO_PIN_8

#define Sensor4_PORT GPIOC
#define Sensor4_PIN  GPIO_PIN_9

#define Sensor5_PORT GPIOB
#define Sensor5_PIN  GPIO_PIN_8

#define Sensor6_PORT GPIOB
#define Sensor6_PIN  GPIO_PIN_9

// =================== BLUETOOTH ===================

#define BT_TX_PORT GPIOA
#define BT_TX_PIN  GPIO_PIN_9

#define BT_RX_PORT GPIOA
#define BT_RX_PIN  GPIO_PIN_10

// =================== SWITCH (BOTÓN) ===================

#define SWITCH_PORT GPIOA
#define SWITCH_PIN  GPIO_PIN_8

// =================== ULTRASÓNICOS ===================

#define TRIG1_PORT GPIOB
#define TRIG1_PIN  GPIO_PIN_0

#define TRIG2_PORT GPIOA
#define TRIG2_PIN  GPIO_PIN_11

#define TRIG3_PORT GPIOA
#define TRIG3_PIN  GPIO_PIN_12

#define Echo1_PORT GPIOB
#define Echo1_PIN  GPIO_PIN_4

#define Echo2_PORT GPIOB
#define Echo2_PIN  GPIO_PIN_5

#define Echo3_PORT GPIOB
#define Echo3_PIN  GPIO_PIN_6

// === VARIABLES GLOBALES ===
GPIO_PinState s1, s2, s3;
uint16_t velocidadPWM = 30;
char uartBuf[32];

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

	  HAL_Init();
	  SystemClock_Config();
	  MX_GPIO_Init();
	  MX_USART2_UART_Init();
	  MX_USART1_UART_Init();
	  MX_TIM2_Init();
	  MX_TIM3_Init();

	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
	  // Activar el contador de ciclos (si no está activado ya)
	  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
	  DWT->CYCCNT = 0;
	  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

	  while (1)
	  {
			leerSensores();
			if (HAL_GPIO_ReadPin(SWITCH_PORT, SWITCH_PIN) == GPIO_PIN_SET)
				modoAutonomo();
			else
				modoBluetooth();
	  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 71;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 100;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 71;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 100;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA1 PA4 PA5 PA7
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB4 PB5 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void delay_us(uint32_t us)
{
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
    uint32_t start = DWT->CYCCNT;
    while ((DWT->CYCCNT - start) < cycles);
}

float medirDistancia(GPIO_TypeDef* trig_port, uint16_t trig_pin, GPIO_TypeDef* echo_port, uint16_t echo_pin) {
	uint32_t numTicks = 0;
	const float Vsonido = 0.0343f;
	uint32_t timeout = 10000;

	HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_RESET);
	delay_us(3);
	HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_SET);
	delay_us(10);
	HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_RESET);

	while (HAL_GPIO_ReadPin(echo_port, echo_pin) == GPIO_PIN_RESET && timeout--) delay_us(1);
	if (timeout == 0) return -1;

	timeout = 30000;
	while (HAL_GPIO_ReadPin(echo_port, echo_pin) == GPIO_PIN_SET && timeout--) {
		numTicks++;
		delay_us(2);
	}
	if (timeout == 0) return -1;

	return (numTicks * 2.8f * Vsonido) / 2.0f;
}

void moverAdelante(uint16_t velocidad)
{
  // Motor 1 adelante
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, velocidad);  // L_PWM (PA0)
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);   // R_PWM (PB10)
  // Motor 2 adelante
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, velocidad);  // L_PWM (PA6)
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);   // R_PWM (PB1)
}

void moverAtras(uint16_t velocidad)
{
  // Motor 1 atrás
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);   // L_PWM
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, velocidad);  // R_PWM
  // Motor 2 atrás
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, velocidad);
}

void moverIzquierda(uint16_t velocidad)
{
  // Motor 1 avanza, Motor 2 se detiene
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, velocidad-5);
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, velocidad);
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
}

void moverDerecha(uint16_t velocidad)
{
  // Motor 2 avanza, Motor 1 se detiene
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, velocidad);
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, velocidad-5);
}

void moverEje(uint16_t velocidad)
{
  // Motor 2 avanza, Motor 1 se detiene
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, velocidad);
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, velocidad);
}

void detenerMotores()
{
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
}

// Lee sensores infrarrojos
void leerSensores()
{
  s1 = HAL_GPIO_ReadPin(Sensor1_PORT, Sensor1_PIN);
  s2 = HAL_GPIO_ReadPin(Sensor2_PORT, Sensor2_PIN);
  s3 = HAL_GPIO_ReadPin(Sensor3_PORT, Sensor3_PIN);
}

// Control en modo autónomo
void modoAutonomo()
{
  int d1 = (int)(10 * medirDistancia(TRIG1_PORT, TRIG1_PIN, Echo1_PORT, Echo1_PIN));
  int d2 = (int)(10 * medirDistancia(TRIG2_PORT, TRIG2_PIN, Echo2_PORT, Echo2_PIN));

  snprintf(uartBuf, sizeof(uartBuf), "D1=%.1f D2=%.1f\r\n", d1 / 10.0, d2 / 10.0);
  HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);

  if (d1 >= 300 && d2 >= 300)
  {
    if (!s1 && s2 && !s3)        { moverAdelante(20); strcpy(uartBuf, "Adelante\r\n"); }
    else if (s1 && !s2 && !s3)   { moverDerecha(18); strcpy(uartBuf, "Izquierda\r\n"); }
    else if (!s1 && !s2 && s3)   { moverIzquierda(18); strcpy(uartBuf, "Derecha\r\n"); }
    else if (s1 && s2 && !s3)   { moverDerecha(18); strcpy(uartBuf, "DERECHA\r\n"); }
    else if (!s1 && s2 && s3)   { moverIzquierda(18); strcpy(uartBuf, "IZQUIERDA\r\n"); }
    else if (!s1 && !s2 && !s3)
    {
      strcpy(uartBuf, "Buscando línea...\r\n");
      HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);

      uint32_t start_time = HAL_GetTick();
      uint8_t encontrado = 0;

      // 1. Gira a la derecha por 0.75 segundos
      while ((HAL_GetTick() - start_time) < 750)
      {
        moverEje(30);  // Gira sobre su eje
        leerSensores();
        if (s1 || s2 || s3) {
          encontrado = 1;
          break;
        }
        HAL_Delay(10);
      }

      // 2. Si no encontró, gira al lado contrario por 4 segundos
      if (!encontrado)
      {
        start_time = HAL_GetTick();
        while ((HAL_GetTick() - start_time) < 1500)
        {
          // Cambia de dirección: motor1 adelante, motor2 atrás
          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 30);
          __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 30);
          __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);

          leerSensores();
          if (s1 || s2 || s3) {
            encontrado = 1;
            break;
          }
          HAL_Delay(10);
        }
      }

      // 3. Resultado final
      if (encontrado)
      {
        strcpy(uartBuf, "¡Línea detectada!\r\n");
      }
      else
      {
        detenerMotores();
      }

      HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
    }
    else                         { detenerMotores();  strcpy(uartBuf, "Stop\r\n"); }
  }
  else
  {
    detenerMotores();
    strcpy(uartBuf, "Stop\r\n");
  }

  HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
}

// Control por Bluetooth
void modoBluetooth()
{

  uint8_t rx_data;
  if (HAL_UART_Receive(&huart1, &rx_data, 1, 100) == HAL_OK)
  {
    if (rx_data >= '0' && rx_data <= '9')
      velocidadPWM = (rx_data == '0') ? 90 : (rx_data - '0') * 10;

    switch (rx_data)
    {
      case 'F': moverAdelante(velocidadPWM); break;
      case 'B': moverAtras(velocidadPWM); break;
      case 'L': moverIzquierda(velocidadPWM); break;
      case 'R': moverDerecha(velocidadPWM); break;
      case 'S': detenerMotores(); break;
      default:
        strcpy(uartBuf, "Comando invalido\r\n");
        HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
        break;
    }
  }
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
